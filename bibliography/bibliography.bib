@phdthesis{eisenberg2016,
    author = "Richard Eisenberg",
    title = "Dependent Types in Haskell: Theory and Practice.",
    year = 2016,
    school = "University of Pennsylvania",
    annotate = "Richard Eisenberg's work, as mentioned in the thesis proposal, provides an account of how dependent types would look in Haskell. He also provides examples of practical applications of dependent types, such as a type-safe database. This work forms one of the foundations of my research."
}

@phdthesis{gundry2013,
    author = "Adam Michael Gundry",
    title = "Type Inference, Haskell and Dependent Types",
    year = 2013,
    school = "University of Strathclyde",
    annotate = "As mentioned in the thesis proposal, Gundry provides an earlier proposal for how dependent types could look in Haskell. Like Eisenberg, Gundry provides examples of dependent type applications such as removing unit conversion errors, which I describe briefly in my proposal.",
}

@article{mcbride2014,
    author = "Conor McBride",
    title = "How to Keep Your Neighbours In Order",
    year = 2014,
    school = "University of Strathclyde"
}

@article{kennedy2009,
    author = "Andrew Kennedy",
    title = "Types for Units-of-Measure",
    year = 2009,
    journal = "Microsoft Research, Cambridge, UK",
    annotate = "I cite this while discussing current support for units of measure in F\#. One potential path for my thesis is to explore units of measurement with dependent types. Such a thesis would involve drawing from how F\# implements units of measurement.",
}

@article{hotz1999,
    author = "Robert Lee Hotz",
    title = "Mars Probe Lost Due to Simple Math Error",
    journal = "Los Angeles Times",
    year = 1999,
    annotate = "I am only citing this to show an example of what would happen in a worst-case unit conversion error.",
}
@article{fstardependent2016,
    author = "Nikhil Swamy and Cătălin Hriţcu and Chantal Keller and Aseem Rastogi and Antoine Delignat-Lavaud and Simon Forest and Karthikeyan Bhargavan and Cédric Fourneta nd Pierre-Yves Strub and Markulf Kohlweiss and Jean-Karim Zinzindohoue and Santiago Zanella-Béguelin",
    title = "Dependent Types and Multi-Monadic Effects in F*",
    year = 2016, 
    journal = "Principles of Programming Languages, POPL",
    annotate = "I cite this to show that dependent types exist in the F* programming language."
}
@article{agda1,
    author = "Ana Bove and Peter Dybjer and Ulf Norell",
    title = "A Brief Overview of Agda - A Functional Language with Dependent Types",
    year = 2009,
    school = "Chalmers University of Technology, Gothenburg, Sweden",
    journal = "Theorem Proving in Higher Order Logics",
    annotate = "I cite this to show how current work exists to implement dependent types in the Agda programming language. It may contain applications of dependent types that I find useful. ",
}
@article{agda2,
    author = "Ulf Norell",
    title = "Dependently Typed Programming in Agda",
    year = 2009,
    school = "Chalmers University of Technology, Gothenburg, Sweden",
    journal = "International Workshop on Types in Language Design and Implementation",
    annotate = "I cite this to show dependent types exist in the Agda programming language.",
}

@book{coq1,
    author = "Adam Chlipala",
    title = "Certified Programming with Dependent Types",
    year = 2013,
    annotate = "I cite this to show that dependent types exist in the Agda programming language.",
}

@article{idris_systems_programming,
    author = "Edwin C. Brady",
    title = "Idris: Systems Programming Meets Full Dependent Types",
    year = 2011,
    journal = "ACM Workshop on Programming Languages Meets Program Verification",
    annotate = "I cite this to demonstrate that dependent types exist in the Idris programming language. In addition, an intersection between dependent types and systems programming may be worth exploring."
}

@article{aus_senate,
    author = "Berj Chilingirian and Zara Perumal and Ronald L. Rivest and Grahame Bowland and Andrew Conway and Philip B. Stark and Michelle Blom and Chris Culnane and Vanessa Teague",
    title = "Auditing Australian Senate Ballots",
    year = 2016,
    school = "Computer Science and Artificial Intelligence Laboratory at the Massachusetts Institute of Technology and Department of Statistics, University of California Berkeley and Department of Computing and Information Systems, University of Melbourne.",
    annotate = "I cite this to show that auditing Australian Senate Ballots is currently an NP-complete problem. Through type-safe programming, I aim to sidestep this lengthy process. In this paper, Bayesian audits are proposed instead of a full audit in order to get a verifiable result with some degree of mathematical precision."
}

@article{aus_senate_news, 
    author = "Josh Taylor",
    title = "Senate Calls for Release of AEC Vote Count Source Code",
    year = 2014, 
    journal = "ZDNet",
    annotate = "Cited to show that the current code for the Australian Senate vote counting program is proprietary.",
}