@phdthesis{eisenberg2016,
	author = "Richard Eisenberg",
	title = "Dependent Types in Haskell: Theory and Practice.",
	year = 2016,
	school = "University of Pennsylvania",
	annotate = "Richard Eisenberg's work, as mentioned in the thesis proposal, provides an account of how dependent types would look in Haskell. He also provides examples of practical applications of dependent types, such as a type-safe database. This work forms one of the foundations of my research."
}

@phdthesis{alf,
	author = "Lena Magnusson",
	title = {The Implementation of ALF: A Proof Editor Based on Martin-L{\"o}f's Monomorphic Type Theory with Explicit Substitution},
	year = 1994,
	school = "University of Gothenburg",
	isbn = {91-7197-066-5},
}

@phdthesis{gundry2013,
	author = "Adam Michael Gundry",
	title = "Type Inference, Haskell and Dependent Types",
	year = 2013,
	school = "University of Strathclyde",
	annotate = "As mentioned in the thesis proposal, Gundry provides an earlier proposal for how dependent types could look in Haskell. Like Eisenberg, Gundry provides examples of dependent type applications such as removing unit conversion errors, which I describe briefly in my proposal.",
}

@phdthesis{norell:thesis,
  author  = {Ulf Norell},
  title	  = {Towards a practical programming language based on dependent type
	     theory},
  school  = {Department of Computer Science and Engineering, Chalmers University of Technology},
  year	  = 2007,
  month	  = {September},
  address = {SE-412 96 G\"{o}teborg, Sweden}
}

@article{coquand1988calculus,
  title={The calculus of constructions},
  author={Coquand, Thierry and Huet, G{\'e}rard},
  journal={Information and computation},
  volume={76},
  number={2-3},
  pages={95--120},
  year={1988},
  publisher={Elsevier}
}

@book{realworldhaskell,
  title={Real World Haskell},
  author={O'Sullivan, Bryan and Goerzen, John and Stewart, Donald Bruce},
  year={2008},
  publisher={" O'Reilly Media, Inc."}
}


@article{mcbride2014,
	author = "Conor McBride",
	title = "How to Keep Your Neighbours In Order",
	year = 2014,
	school = "University of Strathclyde"
}

@article{eisenberg2014,
	author = "Takayuki Maranushi and Richard A. Eisenberg",
	title = "Experience Report: Type-Checking Polymorphic Units for Astrophysics Research in Haskell",
	year = 2014,
	journal = "Proceedings of the 2015 ACM SIGPLAN Symposium on Haskell",
	location = "Gothenburg, Sweden",
	pages = {31-38}
}

@article{kennedy2009,
	author = "Andrew Kennedy",
	title = "Types for Units-of-Measure",
	year = 2009,
	journal = "Proceedings of the Third Summer Conference of the Central European Functional Programming School",
	annotate = "I cite this while discussing current support for units of measure in F\#. One potential path for my thesis is to explore units of measurement with dependent types. Such a thesis would involve drawing from how F\# implements units of measurement.",
}

@article{hotz1999,
	author = "Robert Lee Hotz",
	title = "Mars Probe Lost Due to Simple Math Error",
	journal = "Los Angeles Times",
	year = 1999,
	annotate = "I am only citing this to show an example of what would happen in a worst-case unit conversion error.",
}
@inproceedings{fstar_distributed_programming,
	author = {Swamy, Nikhil and Chen, Juan and Fournet, C{\'e}dric and Strub, Pierre-Yves and Bhargavan, Karthikeyan and Yang, Jean},
	title = {Secure Distributed Programming with Value-dependent Types},
	booktitle = {Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming},
	series = {ICFP '11},
	year = {2011},
	isbn = {978-1-4503-0865-6},
	location = {Tokyo, Japan},
	pages = {266--278},
	numpages = {13},
	url = {http://doi.acm.org/10.1145/2034773.2034811},
	doi = {10.1145/2034773.2034811},
	acmid = {2034811},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {refinement types, security types},
} 

@article{agda1,
	author = "Ana Bove and Peter Dybjer and Ulf Norell",
	title = "A Brief Overview of Agda - A Functional Language with Dependent Types",
	year = 2009,
	school = "Chalmers University of Technology, Gothenburg, Sweden",
	journal = "Theorem Proving in Higher Order Logics",
	annotate = "I cite this to show how current work exists to implement dependent types in the Agda programming language. It may contain applications of dependent types that I find useful. ",
}
@article{agda2,
	author = "Ulf Norell",
	title = "Dependently Typed Programming in Agda",
	year = 2009,
	school = "Chalmers University of Technology, Gothenburg, Sweden",
	journal = "International Workshop on Types in Language Design and Implementation",
	annotate = "I cite this to show dependent types exist in the Agda programming language.",
}

@book{coq1,
	author = "Adam Chlipala",
	title = "Certified Programming with Dependent Types",
	year = 2013,
	annotate = "I cite this to show that dependent types exist in the Agda programming language.",
}

@book{tdd_book,
  title={Type-Driven Development with Idris},
  author={Brady, Edwin},
  isbn={9781617293023},
  url={https://books.google.com/books?id=eWzEjwEACAAJ},
  year={2017},
  publisher={Manning Publications Company}
}


@article{idris_systems_programming,
	author = "Edwin C. Brady",
	title = "Idris: Systems Programming Meets Full Dependent Types",
	year = 2011,
	journal = "ACM Workshop on Programming Languages Meets Program Verification",
	annotate = "I cite this to demonstrate that dependent types exist in the Idris programming language. In addition, an intersection between dependent types and systems programming may be worth exploring."
}

@article{aus_senate,
	author = "Berj Chilingirian and Zara Perumal and Ronald L. Rivest and Grahame Bowland and Andrew Conway and Philip B. Stark and Michelle Blom and Chris Culnane and Vanessa Teague",
	title = "Auditing Australian Senate Ballots",
	year = 2016,
	school = "Computer Science and Artificial Intelligence Laboratory at the Massachusetts Institute of Technology and Department of Statistics, University of California Berkeley and Department of Computing and Information Systems, University of Melbourne.",
	annotate = "I cite this to show that auditing Australian Senate Ballots is currently an NP-complete problem. Through type-safe programming, I aim to sidestep this lengthy process. In this paper, Bayesian audits are proposed instead of a full audit in order to get a verifiable result with some degree of mathematical precision."
}

@article{aus_senate_news, 
	author = "Josh Taylor",
	title = "Senate Calls for Release of AEC Vote Count Source Code",
	year = 2014, 
	journal = "ZDNet",
	annotate = "Cited to show that the current code for the Australian Senate vote counting program is proprietary.",
}

@inproceedings{power_of_pi,
 author = {Oury, Nicolas and Swierstra, Wouter},
 title = {The Power of Pi},
 booktitle = {Proceedings of the 13th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '08},
 year = {2008},
 isbn = {978-1-59593-919-7},
 location = {Victoria, BC, Canada},
 pages = {39--50},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1411204.1411213},
 doi = {10.1145/1411204.1411213},
 acmid = {1411213},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dependent types, domain-specific embedded languages},
}

@inproceedings{cryptol_manual,
 	author = {Lewis, Jeff},
 	title = {Cryptol: Specification, Implementation and Verification of High-grade Cryptographic Applications},
 	booktitle = {Proceedings of the 2007 ACM Workshop on Formal Methods in Security Engineering},
 	series = {FMSE '07},
 	year = {2007},
 	isbn = {978-1-59593-887-9},
 	location = {Fairfax, Virginia, USA},
 	pages = {41--41},
 	numpages = {1},
 	url = {http://doi.acm.org/10.1145/1314436.1314442},
 	doi = {10.1145/1314436.1314442},
 	acmid = {1314442},
 	publisher = {ACM},
 	address = {New York, NY, USA},
 	keywords = {certification, cryptography, high assurance, specification language, symmetric key},
 	annotate = "I'm implementing part of a Cryptol compiler in Idris as part of my literature review. This provides a handy reference to the Cryptol programming language."

} 

@book{pmb_spec,
 author = {Kay, David C. and Levine, John R.},
 title = {Graphics File Formats},
 year = {1994},
 isbn = {0070340250},
 edition = {2nd},
 publisher = {McGraw-Hill, Inc.},
 address = {New York, NY, USA},
} 


@article{ml_type_theory,
	title = {An Intuitionistic Theory of Types},
	author = {Per Martin-L{\"o}f},
	journal = {Unpublished Preprint},
	year = 1972,
}

@book{intro_martin_lof,
	title = {Programming in Martin-L{\"o}f's Type Theory: An Introduction},
	author = {Bengt Nordstrom and Kent Petersson and Jan M. Smith},
	year = 1990,
	publisher = {Oxford University Press},
	annotate = {An introduction to Martin-L{\"รถ}f Type Theory, which serves as the theoretical foundation for dependent types.}
}

@book{nuprl,
 author = {Constable, R. L. and Allen, S. F. and Bromley, H. M. and Cleaveland, W. R. and Cremer, J. F. and Harper, R. W. and Howe, D. J. and Knoblock, T. B. and Mendler, N. P. and Panangaden, P. and Sasaki, J. T. and Smith, S. F.},
 title = {Implementing Mathematics with the Nuprl Proof Development System},
 year = {1986},
 isbn = {0-13-451832-2},
 publisher = {Prentice-Hall, Inc.},
 address = {Upper Saddle River, NJ, USA},
} 

@book{girard1989proofs,
	title={Proofs and Types},
	author={Girard, J.Y. and Lafont, Y. and Taylor, P.},
	isbn={9780521371810},
	lccn={gb89006177},
	series={Cambridge Tracts in Theoretical Computer Science},
	url={https://books.google.com/books?id=6JOEQgAACAAJ},
	year={1989},
	publisher={Cambridge University Press},
	annotate = "Cited in my section on the history of dependent types when discussing Agda, a theorem prover and programming language."
}

@misc{idris_pop,
	title = "the-power-of-pi, Cryptol.lidr",
	author = "Eric Bailey",
	year = 2016,
	annotate = "This is an implementation of the power of pi cryptol compiler and PBM parser but in the Idris general-purpose dependently typed programming language."
}

@misc{f_sharp_units,
	title = "Units of Measure",
	author = "Philip Carter and Luke Latham and Maira Wenzel",
	year = 2016, 
	annotate = "I give a brief overview of units of measure in F\#. This is official Microsoft documentation on how they appear in F\#"
}

@article{structured_type_theory,
	author = "Catarina Coquand and Thierry Coquand",
	title = "Structured Type Theory",
	year = 1999,
	annotate = "Cited when I discuss Agda in the history of dependent types."
}

@misc{idris_dependent_pairs,
	author = {Jan de Muijnck-Hughes},
	title = {Types and Functions},
	year = 2015,
	annotate = "Cited when I introduce the concept of dependent pairs in Idris."
}

@inproceedings{cayenne,
 author = {Augustsson, Lennart},
 title = {Cayenne: a Language with Dependent Types},
 booktitle = {Proceedings of the Third ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '98},
 year = {1998},
 isbn = {1-58113-024-4},
 location = {Baltimore, Maryland, USA},
 pages = {239--250},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/289423.289451},
 doi = {10.1145/289423.289451},
 acmid = {289451},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dependent types, language design, module systems, type systems},
} 



@inproceedings {tao,
	author = {Nathan Bronson and Zach Amsden and George Cabrera and Prasad Chakka and Peter Dimov and Hui Ding and Jack Ferris and Anthony Giardullo and Sachin Kulkarni and Harry Li and Mark Marchukov and Dmitri Petrov and Lovro Puzar and Yee Jiun Song and Venkat Venkataramani},
	title = {{TAO}: Facebook{\textquoteright}s Distributed Data Store for the Social Graph},
	booktitle = {The 2013 {USENIX} Annual Technical Conference ({USENIX} {ATC} 13)},
	year = {2013},
	isbn = {978-1-931971-01-0},
	address = {San Jose, CA},
	pages = {49--60},
	url = {https://www.usenix.org/conference/atc13/technical-sessions/presentation/bronson},
	publisher = {{USENIX}},
}

@incollection{martin_lof,
	title = "Constructive Mathematics and Computer Programming",
	editor = "L. Jonathan Cohen and Jerzy ลoล and Helmut Pfeiffer and Klaus-Peter Podewski",
	series = "Studies in Logic and the Foundations of Mathematics",
	publisher = "Elsevier",
	volume = "104",
	number = "Supplement C",
	pages = "153 - 175",
	year = "1982",
	booktitle = "Logic, Methodology and Philosophy of Science VI",
	issn = "0049-237X",
	doi = "https://doi.org/10.1016/S0049-237X(09)70189-2",
	url = "http://www.sciencedirect.com/science/article/pii/S0049237X09701892",
	author = {Per Martin-L{\"o}f},
	annotate = "This is the paper where Per Martin-L{\"รถ}f introduces Martin-L{\"รถ}f type theory, which serves as a theoretical underpinning for modern-day dependent type implementations in Idris and Agda."
}

@article{algebraic,
	title = "Programming and Reasoning with Algebraic Effects and Dependent Types",
	author = "Edwin C. Brady",
	year = 2013,
	journal = "Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming",
	series = "ICFP '13"
}

@article{flights,
 author = {Unterbrunner, P. and Giannikis, G. and Alonso, G. and Fauser, D. and Kossmann, D.},
 title = {Predictable Performance for Unpredictable Workloads},
 journal = {Proc. VLDB Endow.},
 issue_date = {August 2009},
 volume = {2},
 number = {1},
 month = aug,
 year = {2009},
 issn = {2150-8097},
 pages = {706--717},
 numpages = {12},
 url = {http://dx.doi.org/10.14778/1687627.1687707},
 doi = {10.14778/1687627.1687707},
 acmid = {1687707},
 publisher = {VLDB Endowment},
}

@InProceedings{stv_haskell,
author="Ghale, Milad K.
and Gor{\'e}, Rajeev
and Pattinson, Dirk",
editor="Krimmer, Robert
and Volkamer, Melanie
and Braun Binder, Nadja
and Kersting, Norbert
and Pereira, Olivier
and Sch{\"u}rmann, Carsten",
title="A Formally Verified Single Transferable Voting Scheme with Fractional Values",
booktitle="Electronic Voting",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="163--182",
abstract="We formalise a variant of the Single Transferable Vote scheme with fractional transfer values in the theorem prover Coq. Our method advocates the idea of vote counting as application of a sequence of rules. The rules are an intermediate step for specifying the protocol for vote-counting in a precise symbolic language. We then formalise these rules in Coq. This reduces the gap between the legislation and formalisation so that, without knowledge of formal methods, one can still validate the process. Moreover our encoding is modular which enables us to capture other Single Transferable Vote schemes without significant changes. Using the built-in extraction mechanism of Coq, a Haskell program is extracted automatically. This program is guaranteed to meet its specification. Each run of the program outputs a certificate which is a precise, independently checkable record of the trace of computation and provides all relevant details of how the final result is obtained. This establishes correctness, reliability, and verifiability of the count.",
isbn="978-3-319-68687-5"
}

@INPROCEEDINGS{prom1,
author={D. Cansell and J. P. Gibson and D. Mery},
booktitle={Fifth IEEE International Conference on Software Engineering and Formal Methods (SEFM 2007)},
title={Formal verification of tamper-evident storage for e-voting},
year={2007},
volume={},
number={},
pages={329-338},
keywords={formal verification;politics;security of data;e-voting;election unauthorised votes;electronic voting systems;formal methods;formal verification;reusable formal design pattern;tamper-evident storage;transparency degree;votes security;Application software;Electronic voting;Electronic voting systems;Formal verification;Nominations and elections;PROM;Risk analysis;Secure storage;Security;Software engineering},
doi={10.1109/SEFM.2007.21},
ISSN={1551-0255},
month={Sept},}

@INPROCEEDINGS{prom2,
author={D. Molnar and T. Kohno and N. Sastry and D. Wagner},
booktitle={2006 IEEE Symposium on Security and Privacy (S P'06)},
title={Tamper-evident, history-independent, subliminal-free data structures on PROM storage -or- how to store ballots on a voting machine},
year={2006},
volume={},
number={},
pages={6 pp.-370},
keywords={PROM;data privacy;data structures;public administration;PROM storage;Programmable Read Only Memory;ballot storage;electronic voting machine;history-independent data structures;subliminal-free data structures;subliminal-free representation;tamper-evident data structures;vote storage unit;voter privacy;write-once storage medium;Computer crashes;Costs;Data structures;Electronic voting;Electronic voting systems;Nominations and elections;PROM;Privacy;Proposals;Protection},
doi={10.1109/SP.2006.39},
ISSN={1081-6011},
month={May},}

@article{margin_of_victory,
author = {Xia, Lirong},
year = {2012},
month = {06},
pages = {},
title = {Computing the margin of victory for various voting rules},
booktitle = {Proceedings of the ACM Conference on Electronic Commerce}
}

@article{strategic,
 ISSN = {01761714, 1432217X},
 URL = {http://www.jstor.org/stable/41105995},
 abstract = {We give evidence that Single Tranferable Vote (STV) is computationally resistant to manipulation : It is NP-complete to determine whether there exists a (possibly insincere) preference that will elect a favored candรญate, even in an election for a single seat. Thus strategic voting under STV is qualitatively more difficult than under other commonly-used voting schemes. Furthermore, this resistance to manipulation is inherent to STV and does not depend on hopeful extraneous assumptions like the presumed difficulty of learning the preferences of the other voters. We also prove that it is NP-complete to recognize when an STV election violates monotonicity. This suggests that non-monotonicity in STV elections might be perceived as less threatening since it is in effect "hidden" and hard to exploit for strategic advantage.},
 author = {John J. Bartholdi and James B. Orlin},
 journal = {Social Choice and Welfare},
 number = {4},
 pages = {341-354},
 publisher = {Springer},
 title = {Single transferable vote resists strategic voting},
 volume = {8},
 year = {1991}
}

๏ปฟ@misc{stv_pseudocode,
   author = {Abensour Sellstr{\"o}m, Gabriel and Runefelt Tรตnisson, Meidi},
   institution = {KTH, School of Computer Science and Communication (CSC)},
   school = {KTH, School of Computer Science and Communication (CSC)},
   school = {KTH, School of Computer Science and Communication (CSC)},
   title = {Analysis of Voting Algorithms: a comparative study of the Single Transferable Vote.},
   series = {Kandidatexjobb CSC},
   number = {K12001},
   abstract = {A voting system is defined as a procedure through which political power is distributed among candidates - from the ballot box to the parliament. This essay specifically seeks to contrast the Single Transferable Vote system with two other voting algorithms (Modified Sainte-Laguรซ and First-Past-The-Post), by constructing Java implementations of the algorithms and running example data through them. Thus, the suitability of a possible real-life implementation of the Single Transferable Vote method in a Swedish parliament context is evaluated. Furthermore, an alternative version of the original STV method which has been modified to fit these conditions is suggested. The effects of such an implementation on election outcomes are not entirely conclusive, and the conclusion is that more research is needed before a definite evaluation can be made.  },
   URL = {http://www.csc.kth.se/utbildning/kandidatexjobb/datateknik/2012/rapport/abensour_sellstrom_gabriel_OCH_runefelt_tonisson_meidi_K12001.pdf},
   year = {2012}
}

